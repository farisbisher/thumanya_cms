version: '3.9'

services:
  # Infrastructure Services
  zookeeper:
    image: zookeeper:3.8.1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    healthcheck:
      test: [ "CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kafka:
    image: bitnami/kafka:3.5.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_CREATE_TOPICS: "programs.events:1:1"
      ALLOW_PLAINTEXT_LISTENERS: "yes"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  opensearch:
    image: opensearchproject/opensearch:2.9.0
    platform: linux/arm64 # For ARM systems
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - cluster.name=cms-cluster
      - node.name=cms-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\"' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - opensearch_data:/usr/share/opensearch/data

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cms_db
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cms_user -d cms_db" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # CMS Service
  server:
    build: .
    command: >
      sh -c "pytest &&
            python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/cms_system
    ports:
      - "8000:8000"
    environment:
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_pass
      POSTGRES_DB: cms_db
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      OPENSEARCH_HOST: opensearch:9200
      KAFKA_BOOTSTRAP: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

  celery:
    build: .
    command: celery -A cms_system worker -l info
    volumes:
      - .:/cms_system
    environment:
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_pass
      POSTGRES_DB: cms_db
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      OPENSEARCH_HOST: opensearch:9200
      KAFKA_BOOTSTRAP: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Discovery Services
  discovery_web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/cms_system
    ports:
      - "8001:8000"
    environment:
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_pass
      POSTGRES_DB: cms_db
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      OPENSEARCH_HOST: opensearch:9200
      KAFKA_BOOTSTRAP: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

  discovery_indexer:
    build: .
    command: python discovery/indexer/consumer.py
    volumes:
      - .:/cms_system
    environment:
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: cms_pass
      POSTGRES_DB: cms_db
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      OPENSEARCH_HOST: opensearch:9200
      KAFKA_BOOTSTRAP: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
  opensearch_data:
  redis_data:
